import { LineEdit, Button, TextEdit, GridBox, ComboBox, HorizontalBox } from "std-widgets.slint";

export struct GraphInfo {
    title:          string,
    
    x-axis-label:   string,
    y-axis-label:   string,
    z-axis-label:   string,

    x-data:         string,
    y-data:         string,
    z-data:         string,

    is_2d:          bool,
}

enum GraphModes {
    Graph_2D,
    Graph_3D,
}

export component DataGraphCreator {

    pure callback csv_with_columns(int) -> [string];
    pure callback make_graph(GraphInfo);

    private property <GraphModes> graph_mode: GraphModes.Graph-3D;
    private property <[string]> mode_names: ["2D", "3D"];
    private property <percent> axis_proportion: 33%;

    GridLayout {
        Row {
            ComboBox {
                current-value: mode_names[1];
                model: mode_names;
                selected(value) => {
                    if value == mode_names[0] {
                        graph_mode = GraphModes.Graph-2D;
                        axis_proportion = 50%;
                    }
                    else if value == mode_names[1] {
                        graph_mode = GraphModes.Graph-3D;
                        axis_proportion = 33%;
                    }
                }
            }

            graph_preview := Image {
                rowspan: 5;
                col: 1;
                source: @image-url("resources/svg/Test.svg");
            }
        }

        Row {
            HorizontalBox {
                Text {text: "Title: "; vertical-alignment: center;}
                title_name := LineEdit {}
            }
        }

        Row {
            HorizontalBox {
                Text {text: "X-Axis Label: "; vertical-alignment: center;}
                x_axis_name := LineEdit {}
            }
        }
        
        Row {
            HorizontalBox {
                Text {text: "Y-Axis Label: "; vertical-alignment: center;}
                y_axis_name := LineEdit {}
            }
        }
 
        Row { 
            HorizontalBox {
                Text {text: "Z-Axis Label: "; vertical-alignment: center; visible: graph_mode == GraphModes.Graph-3D;}
                z_axis_name := LineEdit {visible: graph_mode == GraphModes.Graph-3D;}
            }
        }

        Row {
            Text {
                text: "X Values:";
                width: axis_proportion;
            }
            Text {
                text: "Y Values:";
                width: axis_proportion;
            }
            Text {
                visible: graph_mode == GraphModes.Graph-3D;
                text: "Z Values:";
                width: axis_proportion;
            }
        }

        Row {
        
            x-axis := TextEdit {
                min-height: 100px;
                width: 33%;
            }

            y-axis := TextEdit {
                min-height: 100px;
                width: 33%;
            }

            z-axis := TextEdit {
                min-height: 100px;
                width: 33%;
            }
        }

        Row {
            Button {
                text: "From CSV";
                clicked => {
                    if graph_mode == GraphModes.Graph-2D {
                        fill_columns(csv_with_columns(2));
                    }
                    else if graph_mode == GraphModes.Graph-3D {
                        fill_columns(csv_with_columns(3));
                    }
                    
                }
            }

            Button {
                text: "Create and Show Graph";
                clicked => {
                    make_graph({
                        title: title-name.text, 
                        
                        x-axis-label: x-axis-name.text,
                        y-axis-label: y-axis-name.text,
                        z-axis-label: z-axis-name.text,

                        x-data: x-axis.text,
                        y-data: y-axis.text,
                        z-data: z-axis.text,
                        is_2d: graph_mode == GraphModes.Graph-2D,
                    });
                }
            }
        }
    }

    function fill_columns(columns: [string]) {
        if columns.length == 2 {
            x-axis.text = columns[0];
            y-axis.text = columns[1];
        
        }
        else if columns.length == 3 {
            x-axis.text = columns[0];
            y-axis.text = columns[1];
            z-axis.text = columns[2];
        }
    }
}