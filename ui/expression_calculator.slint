
import { LineEdit, TextEdit, HorizontalBox, VerticalBox, Button, Switch } from "std-widgets.slint";

component ExpressionLine {

    in property <string> start_label;
    pure callback calculate_expression(string) -> string;
    callback append_to_history(string, string);

    HorizontalBox {
        Text {
            text: start_label;
            vertical-alignment: center;
        }
        expression_space :=  LineEdit {
            placeholder-text: "Type A Math Expression Here";
        }
        Text {
            vertical-alignment: center;
            text: "=";
        }
        answer_space := LineEdit {
            read-only: true;
        }
        Button {
            text: "âœ”";
            clicked => {
                answer-space.text = calculate_expression(expression-space.text);
                append_to_history(expression-space.text, answer-space.text);
            }
        }
    }
}

export component ExpressionCalculator {
    pure callback calculate_infix_expression(string) -> string;
    pure callback calculate_prefix_expression(string) -> string;
    
    pure callback append_history(string, string, string) -> string;
    pure callback clear_history();

    private property <bool> history_hidden: false;

    VerticalBox { 
        ExpressionLine {
            start_label: "Infix: ";
            calculate_expression(expr) => {
                root.calculate_infix_expression(expr);
            }
            append_to_history(expr, ans) => {
                calc-history.text = root.append_history(calc-history.text, expr, ans);
            }
        }

        ExpressionLine {
            start_label: "Prefix: ";
            calculate_expression(expr) => {
                root.calculate_prefix_expression(expr);
            }
            append_to_history(expr, ans) => {
                calc-history.text = root.append_history(calc-history.text, expr, ans);
            }
        }

        VerticalBox {
            HorizontalBox {
                Text {
                    text: "History";
                    font-size: 24px;
                }
                Button {
                    text: "Clear History";
                    clicked => {
                        clear_history();
                        calc-history.text = "";
                    }
                }
                Text {
                    text: "Show History:";
                    vertical-alignment: center;
                }
                Switch {
                    checked: true;
                    toggled => {
                        history_hidden = !self.checked;
                        if history_hidden {
                            calc-history.min-height = 0;
                        }
                        else {
                            calc-history.min-height = 100px;
                        }
                    }
                }
            }
            calc_history := TextEdit {
                min-height: 100px;
                visible: !history_hidden;
            }
        }
    }
}