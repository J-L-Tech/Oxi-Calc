import { Button, VerticalBox, TabWidget } from "std-widgets.slint";
import { NumberConverter } from "number_converter.slint";
import { UnitConverter } from "unit_converter.slint";
import { StatsCalc } from "stats_calc.slint";
import { ExpressionCalculator } from "expression_calculator.slint";

import "./resources/font/FiraCode-Medium.ttf";
export component AppWindow inherits Window {
    title: "Math Calc";
    min-height: 700px;
    min-width: 700px;

    default-font-family: "Fira Code";

    pure callback evaluate_expression(string) -> string;
    pure callback append_history(string, string, string) -> string;

    pure callback convert_to_bin(string, string) -> string;
    pure callback convert_to_oct(string, string) -> string;
    pure callback convert_to_dec(string, string) -> string;
    pure callback convert_to_hex(string, string) -> string;

    pure callback convert_units(string, string, string) -> string;

    pure callback data_from_csv() -> string;
    pure callback one_dimensional_statistics(string) -> string;

    TabWidget {
        Tab {
            title: "Calculator";
            ExpressionCalculator {
                width: 100%;
                height:100%;
                calculate_expression(raw_string) => {
                    root.evaluate_expression(raw-string);
                }
                append_history(previous_history, raw_expr, raw_ans) => {
                    root.append_history(previous_history, raw_expr, raw_ans);
                }
            }
        }

        Tab {
            title: "Number Converter";

            number_converter := NumberConverter {
                width: 100%;
                height: 100%;
                convert_to_bin(prefix, raw_string) => {
                    root.convert_to_bin(prefix, raw_string);
                }
                convert_to_oct(prefix, raw_string) => {
                    root.convert_to_oct(prefix, raw_string);
                }
                convert_to_dec(prefix, raw_string) => {
                    root.convert_to_dec(prefix, raw_string);
                }
                convert_to_hex(prefix, raw_string) => {
                    root.convert_to_hex(prefix, raw_string);
                }
            }
        }

        Tab {
            title: "Unit Converter";
           
            unit_converter := UnitConverter {
                width: 100%;
                height: 100%;
                convert_units(left_type, left_value, right_type) => {
                    root.convert_units(left_type, left_value, right_type);
                }
            }
        }

        Tab {
            title: "Statistics";
            stats_calc := StatsCalc {
                width: 100%;
                height: 100%;
                data_from_csv => {
                    root.data_from_csv();
                }

                one_dimensional_statistics(column) => {
                    root.one_dimensional_statistics(column);
                }
            }
        }

        Tab {
            title: "Graphing TODO";
        }

    }
}
